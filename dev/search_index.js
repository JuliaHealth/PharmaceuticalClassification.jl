var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = PharmaceuticalClassification","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [PharmaceuticalClassification]","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"CurrentModule = PharmaceuticalClassification","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Generate-graph-and-save-graph-to-file","page":"Examples","title":"Generate graph and save graph to file","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using PharmaceuticalClassification\nusing Serialization\n\nrxnsat = \"/path/to/rrf/RXNSAT.RRF\"\ngraph = @time build_graph(; rxnsat = rxnsat) # usually takes approx 3-5 minutes\n@time Serialization.serialize(\"my_graph_filename.serialized\", graph) # usually takes approx 3-4 minutes","category":"page"},{"location":"examples/#Load-graph-from-file","page":"Examples","title":"Load graph from file","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using PharmaceuticalClassification\nusing Serialization\n\ngraph = @time Serialization.deserialize(\"my_graph_filename.serialized\") # usually takes approx 1-3 minutes","category":"page"},{"location":"examples/#Make-queries","page":"Examples","title":"Make queries","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using PharmaceuticalClassification\nusing Serialization\n\ngraph = Serialization.deserialize(\"my_graph_filename.serialized\")\n\navailable_systems(graph)\nequivalent(graph, PharmClass(\"NDC\", \"1234-5678-90\"))\nparents(graph, PharmClass(\"NDC\", \"1234-5678-90\"))\nchildren(graph, PharmClass(\"NDC\", \"1234-5678-90\"))\n\natc_vertices = PharmClass[]\np = ProgressMeter.Progress(length(graph), 1.0)\nfor vertex in graph\n    ProgressMeter.next!(p)\n    if system_matches(vertex, r\"ATC\")\n        push!(atc_vertices, vertex)\n    end\nend\nunique!(atc_vertices)\nsort!(atc_vertices)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PharmaceuticalClassification","category":"page"},{"location":"#PharmaceuticalClassification","page":"Home","title":"PharmaceuticalClassification","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PharmaceuticalClassification implements mappings between different systems for classifying medications.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please see the GitHub repository.","category":"page"}]
}
